// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Provides AI-powered spending recommendations.
 *
 * - getSpendingRecommendations - A function that generates spending insights and recommendations.
 * - SpendingRecommendationsInput - The input type for the getSpendingRecommendations function.
 * - SpendingRecommendationsOutput - The return type for the getSpendingRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SpendingRecommendationsInputSchema = z.object({
  spendingData: z.string().describe('The user spending data in JSON format.'),
  savingGoals: z.string().describe('The user saving goals in JSON format.'),
  income: z.number().describe('The user monthly income.'),
});
export type SpendingRecommendationsInput = z.infer<typeof SpendingRecommendationsInputSchema>;

const SpendingRecommendationsOutputSchema = z.object({
  spendingSpikesPrediction: z.string().describe('Predicted spending spikes.'),
  budgetCutSuggestions: z.string().describe('Suggested budget cuts.'),
  unusualActivityDetection: z.string().describe('Detected unusual spending activity.'),
  recommendedMonthlyBudget: z.number().describe('Recommended monthly budget.'),
});
export type SpendingRecommendationsOutput = z.infer<typeof SpendingRecommendationsOutputSchema>;

export async function getSpendingRecommendations(input: SpendingRecommendationsInput): Promise<SpendingRecommendationsOutput> {
  return spendingRecommendationsFlow(input);
}

const spendingRecommendationsPrompt = ai.definePrompt({
  name: 'spendingRecommendationsPrompt',
  input: {schema: SpendingRecommendationsInputSchema},
  output: {schema: SpendingRecommendationsOutputSchema},
  prompt: `You are a personal finance advisor. Analyze the user's spending data, saving goals, and income to provide personalized recommendations.

  Spending Data: {{{spendingData}}}
  Saving Goals: {{{savingGoals}}}
  Income: {{{income}}}

  Provide the following insights:
  - Predict spending spikes based on historical data.
  - Suggest budget cuts to help the user achieve their saving goals.
  - Detect any unusual spending activity that the user should be aware of.
  - Recommend a monthly budget based on the user's income, spending habits and saving goals.
  `,
});

const spendingRecommendationsFlow = ai.defineFlow(
  {
    name: 'spendingRecommendationsFlow',
    inputSchema: SpendingRecommendationsInputSchema,
    outputSchema: SpendingRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await spendingRecommendationsPrompt(input);
    return output!;
  }
);
